{"version":3,"sources":["recipe.module.css","Recipe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Recipe","title","calories","image","ingredients","className","style","recipe","map","ingredienttt","text","src","alt","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","response","json","data","hits","console","log","onSubmit","e","preventDefault","type","value","onChange","target","recipeee","key","label","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sGACAA,EAAOC,QAAU,CAAC,OAAS,yB,2MCqBZC,EAnBA,SAAC,GAAwC,IAAvCC,EAAsC,EAAtCA,MAAMC,EAAgC,EAAhCA,SAASC,EAAuB,EAAvBA,MAAMC,EAAiB,EAAjBA,YAClC,OACI,yBAAKC,UAAaC,IAAMC,QACpB,4BAAKN,GACL,4BACKG,EAAYI,KAAK,SAAAC,GAAY,OAC1B,4BACKA,EAAaC,UAI1B,2BAAIR,GACJ,yBAAKG,UAAaC,IAAMH,MAAOQ,IAAOR,EAAOS,IAAM,OC0DhDC,G,MArEH,WACV,IADgB,EAIYC,mBAAU,IAJtB,mBAIVC,EAJU,KAIFC,EAJE,OAKYF,mBAAU,KALtB,mBAKTG,EALS,KAKFC,EALE,OAMSJ,mBAAU,WANnB,mBAMTK,EANS,KAMHC,EANG,KAShBC,qBAAU,WACRC,MACC,CAACH,IAEN,IAAMG,EAAU,uCAAG,8BAAAC,EAAA,sEACMC,MAAK,0CAAqCL,EAArC,mBAbb,WAaa,oBAZZ,uCAWC,cACXM,EADW,gBAEEA,EAASC,OAFX,OAEXC,EAFW,OAKjBX,EAAWW,EAAKC,MAChBC,QAAQC,IAAIH,EAAKC,MANA,2CAAH,qDAuBd,OACE,yBAAKvB,UAAW,OACd,0BAAM0B,SAVM,SAAAC,GAChBA,EAAEC,iBACFb,EAASH,IAQwBZ,UAAW,eACtC,2BACIA,UAAU,aACV6B,KAAM,OACNC,MAASlB,EACTmB,SArBS,SAAAJ,GACnBd,EAAWc,EAAEK,OAAOF,UAsBd,4BACM9B,UAAU,gBACV6B,KAAM,UAFZ,WAMF,yBAAK7B,UAAW,WACfU,EAAQP,KAAI,SAAA8B,GAAQ,OAClB,kBAAC,EAAD,CACKC,IAAOD,EAAS/B,OAAOiC,MACvBvC,MAAUqC,EAAS/B,OAAOiC,MAC1BtC,SAAYoC,EAAS/B,OAAOL,SAC5BC,MAASmC,EAAS/B,OAAOJ,MACzBC,YAAekC,EAAS/B,OAAOH,qBClDzBqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.7f5c2741.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__BdaUe\"};","import React from 'react';\nimport style from './recipe.module.css';\n\nconst Recipe = ({title,calories,image,ingredients}) => {\n    return (\n        <div className = {style.recipe}>\n            <h1>{title}</h1>\n            <ol>\n                {ingredients.map (ingredienttt => (\n                    <li>\n                        {ingredienttt.text}\n                    </li>\n                ))}\n            </ol>\n            <p>{calories}</p>\n            <img className = {style.image} src = {image} alt = \"\" />\n\n        </div>\n\n    );\n}\n\nexport default Recipe;","import React ,{useEffect, useState }from 'react';\nimport Recipe from \"./Recipe\";\nimport './App.css';\n\nconst App = () => {\n  const APP_ID = \"8ba70183\";\n  const App_KEY = \"50c6e29716949341f88756a37dc2dfaf\t\";\n  \n  const[recipes,setRecipes] = useState ([]);\n  const [search,setSearch]  = useState (\" \");\n  const [query,setQuery] = useState ('chicken');\n\n\n  useEffect(()=> {\n    getRecipes();\n  }, [query]);\n\nconst getRecipes = async () => {\n  const response = await fetch (`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${App_KEY}`);\n  const data = await response.json ();\n  // console.log (data.hits);\n\n  setRecipes(data.hits);\n  console.log(data.hits);\n};\n\nconst updateSearch = e => {\n  setSearch (e.target.value);\n  // console.log (search);\n\n};\n\nconst getSearch = e => {\n  e.preventDefault ();\n  setQuery(search);\n\n};\n\n\n\n  return (\n    <div className =\"App\">   \n      <form onSubmit = {getSearch} className =\"search-form\">\n        <input \n            className=\"search-bar\" \n            type =\"text\" \n            value = {search}   \n            onChange = {updateSearch} \n        />\n        <button \n              className=\"search-button\" \n              type =\"submit\">\n          Search\n          </button>\n      </form>\n      <div className= \"recipes\">\n      {recipes.map(recipeee => (\n         <Recipe \n              key = {recipeee.recipe.label}\n              title = { recipeee.recipe.label} \n              calories = {recipeee.recipe.calories} \n              image = {recipeee.recipe.image}\n              ingredients = {recipeee.recipe.ingredients}\n         />\n\n\n      ))\n      }\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}